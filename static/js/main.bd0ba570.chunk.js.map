{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","API_KEY","App","state","undefined","error","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd0ba570.chunk.js","sourcesContent":["import React from 'react';\n\nclass Titles extends React.Component {\n  render(){\n    return(\n      <div>\n      <h1 className=\"title-container__title\">Check Weather</h1>\n      </div>\n    );\n  }\n}\n\nexport default Titles;\n","import React from 'react';\n\nclass Form extends React.Component {\n  render(){\n    return(\n      <div>\n        <form onSubmit={this.props.getWeather}>\n          <div className=\"input-group form-group\">\n            <input type=\"text\" name=\"city\" className=\"form-control\" placeholder=\"Your City..\" />\n          </div>\n        <div className=\"input-group form-group\">\n          <input type=\"text\" name=\"country\" className=\"form-control\" placeholder=\"Your Country..\" />\n        </div>\n        <div className=\"form-group\">\n          <button className=\"login_btn\">Get Weather</button>\n        </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\n\nclass Weather extends React.Component {\n  render(){\n    return(\n      <div>\n\t\t\t\t<div className=\"d-flex justify-content-right links\">\n          {\n            this.props.city && this.props.country && <p className=\"weather__key\"> Location:\n            <span className=\"weather__value\"> { this.props.city }, { this.props.country }</span>\n            </p>\n          }\n      </div>\n\n        <div className=\"d-flex justify-content-right\">\n          {\n            this.props.temperature && <p className=\"weather__key\"> Temperature:\n            <span className=\"weather__value\"> { this.props.temperature }\t</span>\n         </p>\n          }\n\t\t\t\t</div>\n\n        <div className=\"d-flex justify-content-right\">\n          {\n          this.props.humidity && <p className=\"weather__key\"> Humidity:\n           <span className=\"weather__value\"> { this.props.humidity } </span>\n          </p>\n          }\n\t\t\t\t</div>\n\n        <div className=\"d-flex justify-content-right\">\n          {\n            this.props.description && <p className=\"weather__key\"> Conditions:\n             <span className=\"weather__value\"> { this.props.description } </span>\n            </p>\n            }\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n\n  }\n\n}\n\nexport default Weather;\n","import React from 'react';\nimport Titles from './components/Titles.js';\nimport Form from './components/Form.js';\nimport Weather from './components/Weather.js';\n\nconst API_KEY = \"41ae6590cc803c925d9d02205539a03a\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if (city && country) {\n          this.setState({\n            temperature: data.main.temp,\n            city: data.name,\n            country: data.sys.country,\n            humidity: data.main.humidity,\n            description: data.weather[0].description,\n            error: \"\"\n          });\n        } else {\n          this.setState({\n            temperature: undefined,\n            city: undefined,\n            country: undefined,\n            humidity: undefined,\n            description: undefined,\n            error: \"Please enter the values.\"\n          });\n        }\n      }\n\n\n      render() {\n        return (\n          <div>\n            <div className=\"wrapper\">\n              <h4><Titles /></h4>\n                <div className=\"d-flex justify-content-center h-100\">\n                <div className=\"card\">\n                <div className=\"card-header\">\n                  <h4>Find out temperature, conditions and more...</h4>\n                </div>\n\n                <div className=\"card-body\">\n    \t\t\t\t\t\t   <Form getWeather={this.getWeather} />\n                   <Weather\n                       temperature={this.state.temperature}\n                       humidity={this.state.humidity}\n                       city={this.state.city}\n                       country={this.state.country}\n                       description={this.state.description}\n                       error={this.state.error}\n                     />\n    \t\t\t\t\t</div>\n    \t\t\t</div>\n    \t\t</div>\n    \t</div>\n    </div>\n\n        );\n      }\n    };\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}